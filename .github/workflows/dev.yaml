name: final-capstone

on:
  push:
    branches: [master] # Trigger on pushes to the master branch

env:
  AWS_REGION: us-east-1 # Define your AWS region
  ECR_REGISTRY: 931003996958.dkr.ecr.us-east-1.amazonaws.com # Corrected ECR registry for us-east-1
  EKS_CLUSTER_NAME: dev-cp-cluster # Name of your EKS cluster
  DOCKERHUB_REPOSITORY_NAME: kandula17/e-commerce # Your Docker Hub repository name

jobs:
  build:
    runs-on: [self-hosted, aws] # Specify your self-hosted runner labels

    steps:
      - name: Checkout Source code # This action checks out your repository code
        uses: actions/checkout@v3

      # This step determines the image tag based on the Git reference type
      # and sets it as an environment variable (APP_IMAGE_TAG) for subsequent steps.
      - name: Determine and set APP_IMAGE_TAG
        id: set_app_image_tag
        run: |
          # If the ref type is a branch or tag, use the ref name as the tag.
          if [[ "${{ github.ref_type }}" == "branch" || "${{ github.ref_type }}" == "tag" ]]; then
            # Set APP_IMAGE_TAG as an environment variable for the job
            echo "APP_IMAGE_TAG=${GITHUB_REF_NAME}" >> "$GITHUB_ENV"
            echo "Using image tag from GITHUB_REF_NAME: ${GITHUB_REF_NAME}"
          else
            # Otherwise, use the first 7 characters of the commit SHA as the tag.
            echo "APP_IMAGE_TAG=${GITHUB_SHA::7}" >> "$GITHUB_ENV"
            echo "Using image tag from GITHUB_SHA: ${GITHUB_SHA::7}"
          fi
        # The APP_IMAGE_TAG is now available as ${{ env.APP_IMAGE_TAG }} in subsequent steps

      - name: Configure AWS Credentials # Configures AWS credentials for ECR login
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }} # Use the AWS_REGION from env block

      - name: Log in to ECR # Logs into Amazon Elastic Container Registry
        run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      # - name: Log in to Docker Hub # Logs into Docker Hub using secrets
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }} # Your Docker Hub username secret
      #     password: ${{ secrets.DOCKERHUB_TOKEN }} # Your Docker Hub access token secret

      - name: Create .env file for ECR
        run: |
          echo "ECR_REGISTRY=${{ env.ECR_REGISTRY }}" > .env
          echo "APP_IMAGE_TAG=${{ env.APP_IMAGE_TAG }}" >> .env
          echo "Generated .env file:"
          cat .env # For debugging purposes, will print content to logs

      - name: Build Docker Compose services # Builds your Docker images using docker compose
        run: |
          echo "Building Docker Compose services with tag: ${{ env.APP_IMAGE_TAG }}"
          # Ensure your docker-compose.yml references the APP_IMAGE_TAG variable, e.g.:
          # image: ${DOCKERHUB_REPOSITORY_NAME}/your-service-name:${APP_IMAGE_TAG}
          sudo docker-compose build
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          APP_IMAGE_TAG: ${{ env.APP_IMAGE_TAG }}

      - name: Push Docker Compose service images to ECR. # Pushes built images to ECR
        run: |
          echo "Pushing Docker Compose services to ECR..."
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          sudo docker-compose push
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          APP_IMAGE_TAG: ${{ env.APP_IMAGE_TAG }}

      - name: Verify pushed images (optional) # Lists local Docker images for verification
        run: sudo docker images

      # Uncomment and modify these steps if you need to deploy to EKS
      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        run: |
           #kubectl set image k8s/app.yml your-container=${{ env.ECR_REGISTRY }}/e-commerce-app:${{ env.APP_IMAGE_TAG }}
           #kubectl set image k8s/api.yml your-container=${{ env.ECR_REGISTRY }}/e-commerce-api:${{ env.APP_IMAGE_TAG }}
           envsubst < k8s/app.yml | kubectl apply -f -
           envsubst < k8s/api.yml | kubectl apply -f -
           echo "Deployment logic goes here"
